{
  "upgrade_plan_name": "Proactive Architect Alignment",
  "description": "A plan to upgrade AI modes to align with the principles of the 'Proactive Architect' ideal contributor profile.",
  "principles_mapping": [
    {
      "principle": "Forward-Thinking and Thoroughness",
      "summary": "Embody meticulous documentation and strategic foresight, anticipating future challenges.",
      "modes_impacted": [
        {
          "mode": "architect",
          "enhancements": [
            "Update role definition to explicitly include 'strategic foresight' and 'risk analysis'.",
            "Add custom instruction to generate 'Future-State Roadmaps' and 'Potential Risk' sections in architecture documents.",
            "Integrate with Orchestrator to automatically generate 'tech-debt' or 'improvement' issues based on risk analysis."
          ]
        },
        {
          "mode": "orchestrator",
          "enhancements": [
            "Develop capability to schedule and manage 'future-focused' tasks (e.g., 'Review tech debt in Q3').",
            "Update task prompt template to include an optional 'Foresight' section where agents can note potential future issues."
          ]
        },
        {
          "mode": "code",
          "enhancements": [
            "Encourage the inclusion of `// TODO:` or `// FUTURE:` comments for potential refactoring or feature enhancements.",
            "Add a step in the standard workflow to report potential improvements to the Orchestrator."
          ]
        }
      ]
    },
    {
      "principle": "Structured Workflow (Issue-Driven, Feature Branching, Conventional Commits)",
      "summary": "Follow a predictable workflow using feature branches, issue-driven development, and conventional commits.",
      "modes_impacted": [
        {
          "mode": "orchestrator",
          "enhancements": [
            "Enforce issue-driven development by requiring a valid GitHub issue URL for all new 'feat' or 'fix' tasks.",
            "Automate the creation of feature branch names based on the task description.",
            "Generate conventional commit messages for the Code mode to use, or validate the messages generated by the Code mode."
          ]
        },
        {
          "mode": "code",
          "enhancements": [
            "Strictly adhere to the conventional commit format provided by the Orchestrator.",
            "Operate exclusively within the context of the assigned feature branch."
          ]
        }
      ]
    },
    {
      "principle": "High-Quality Documentation and Communication",
      "summary": "Create clear, structured, and proactive documentation in PRs and issues.",
      "modes_impacted": [
        {
          "mode": "orchestrator",
          "enhancements": [
            "Automate the creation of Pull Request templates with sections for 'Problem/Solution,' 'Design Choices,' 'Testing Procedures,' and a link to the issue.",
            "Develop a new 'Proactive Issue Creation' task type that can be triggered by other modes to flag potential problems."
          ]
        },
        {
          "mode": "deep-scope",
          "enhancements": [
            "Position the output of this mode as the primary input for 'Proactive Issue Creation' tasks.",
            "Update the role definition to emphasize its role in identifying systemic issues and documenting their broader impact."
          ]
        },
        {
          "mode": "architect",
          "enhancements": [
            "Add a mandatory 'Broader Impact Analysis' section to all design documents."
          ]
        }
      ]
    },
    {
      "principle": "Collaborative Practices",
      "summary": "Engage in code reviews, leverage automation, and foster shared ownership.",
      "modes_impacted": [
        {
          "mode": "orchestrator",
          "enhancements": [
            "Implement a 'Simulated Code Review' workflow where code changes are passed to a second agent for feedback before finalizing.",
            "Integrate more deeply with `github-actions[bot]` and `renovate[bot]` to automate CI/CD and dependency management checks as part of the task validation process."
          ]
        },
        {
          "mode": "code",
          "enhancements": [
            "Develop the ability to receive, interpret, and apply feedback from the 'Simulated Code Review' process."
          ]
        }
      ]
    }
  ]
}